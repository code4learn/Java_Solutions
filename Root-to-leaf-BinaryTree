/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
StringBuilder sb=null;  
 List<String> list = new ArrayList<String>();
 
    public List<String> binaryTreePaths(TreeNode root) {
        
        
        if(root == null){
            return list;
        }
        visitNode(root,Integer.toString(root.val));
        return list; 
    }
    
  public void visitNode(TreeNode node,String path) {
        if(node.left != null) {
            sb = new StringBuilder(path);
            sb.append("->");
            sb.append(Integer.toString(node.left.val));
            visitNode(node.left,sb.toString());
        }
        if(node.right != null) {
            sb = new StringBuilder(path);
            sb.append("->");
            sb.append(Integer.toString(node.right.val));
            visitNode(node.right,sb.toString());
        }
        if(node.left == null && node.right == null) {
            list.add(path);
        }
    }
    
}
